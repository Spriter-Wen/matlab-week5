%基本数值计算方法小组作业
%第5周习题第4题

%第6组 20200405
%牛顿-拉弗森法和拟牛顿法求方程的根并比较

close all;
clear all;
clc;

f1 = @(x)(x*exp(x) - 1);
diff_f1 = @(x)(exp(x)*(x+1));   %f1'(x)
f2 = @(x)(log(x) + x - 2);
diff_f2 = @(x)(1/x + 1);        %f2'(x)

maxits = 30;    %迭代上限
tolerance = 1e-5;   %容许误差

x0 = 1; %牛顿-拉弗森法以此为初始值
x1 = 2; %拟牛顿法使用x0和x1为初始值

%以下命名规则:root_n_1为使用'n'ewton-raphson法求的f1=0的根
%            iterations_q_2为使用'q'uasi-newton法求的f2=0根的迭代次数

[root_n_1,iterations_n_1] = newton_method(f1,diff_f1,x0,maxits,tolerance);
%牛顿-拉弗森法求f1 = 0 的根并得到迭代次数
[root_n_2,iterations_n_2] = newton_method(f2,diff_f2,x0,maxits,tolerance);
%牛顿-拉弗森法求f1 = 0 的根并得到迭代次数
[root_q_1,iterations_q_1] = quasi_newton(f1,x0,x1,maxits,tolerance);
%拟牛顿法求f1 = 0 的根并得到迭代次数
[root_q_2,iterations_q_2] = quasi_newton(f2,x0,x1,maxits,tolerance);
%拟牛顿法求f1 = 0 的根并得到迭代次数

%打印结果
disp(['f1: ','Newton-Raphson method: ','Root= ',num2str(root_n_1),' found in '...
      num2str(iterations_n_1),' iterations.']);
disp(['f1: ','Quasi-Newton method: ','Root= ',num2str(root_q_1),' found in '...
      num2str(iterations_q_1),' iterations.']);
disp(['f2: ','Newton-Raphson method: ','Root= ',num2str(root_n_2),' found in '...
      num2str(iterations_n_2),' iterations.']);
disp(['f2: ','Quasi-Newton method: ','Root= ',num2str(root_q_2),' found in '...
      num2str(iterations_q_2),' iterations.']);

 %牛顿法求解fun = 0的根
 %fun为待求根函数，diff_fun为fun的一阶导数
 %x0为迭代初始值
 %maxits为最大迭代次数
 %tolerance为容许误差
 
function [value,iterations] = newton_method(fun,diff_fun,x0,maxits,tolerance)
    
    iterations = 1;     %第一次迭代
    x1 = x0 - feval(fun,x0)/feval(diff_fun,x0); %x1 = x0 - f(x0)/f'(x0)
    
    while abs(x1-x0)>tolerance && iterations < maxits
        iterations = iterations + 1;
        x0 = x1;
        x1 = x0 - feval(fun,x0)/feval(diff_fun,x0);
    end
    
    value = x1;
    
    if iterations == maxits || value == Inf || value ==-Inf
        disp('Something wrong occured.');
        disp('Please check the function and initial conditions.');
    end
end

%拟牛顿法
%x0和x1均为迭代起始值
function [value,iterations] = quasi_newton(fun,x0,x1,maxits,tolerance)

    iterations = 1;         %第一次迭代
    y0 = feval(fun,x0);     %y0 = fun(x0)
    y1 = feval(fun,x1);     %y1 = fun(x1)
    x2 = x1-(x1-x0)/(y1-y0)*y1;
    
    while abs(x2-x1)>tolerance && iterations < maxits
        iterations = iterations + 1;
        x0 = x1;
        x1 = x2;
        y0 = feval(fun,x0);
        y1 = feval(fun,x1);
        x2 = x1-(x1-x0)/(y1-y0)*y1;
    end
    
    value = x2;
    
    if iterations == maxits || value == Inf || value ==-Inf
        disp('Something wrong occured.');
        disp('Please check the function and initial conditions.');
    end
end

